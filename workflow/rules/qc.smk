# get stdlib modules
from pathlib import Path

# get local modules
from utils.utils_qc import QCUtils

# define data flow directories
work_dir: Path = Path(config["work_dir"])
input_dir: Path = Path(config["pipeline_input"])
output_dir: Path = Path(f'{input_dir}/{config["results"]}/{config["output_dir"]}')

# define log & benchmark directories
log_dir: Path = Path(f'{output_dir}/{config["log_dir"]}')
benchmarks_dir: Path = Path(f'{output_dir}/{config["benchmarks_dir"]}')

# generate flattened samples list
flattended_samples: list = []
flattended_samples.extend(config["sample_groups"]["control"])
flattended_samples.extend(config["sample_groups"]["condition"])

# generate a list of all files to be generated by the run_fastqc rule (terminal files)
terminal_files: list = QCUtils.generate_terminal_files(
    out_dir=output_dir,
    flattened_sample_list=flattended_samples,
    sample_type=config["sample_type"],
)


rule all:
    input:
        terminal_files,
    output:
        temp(touch(f"{work_dir}/progress/fastqc.done")),


rule run_fastqc:
    """
    Runs Fastqc - A high throughput sequence QC analysis tool
    """
    input:
        fastq_R1=input_dir / "{sample}_R1.fastq.gz",
        fastq_R2=input_dir / "{sample}_R2.fastq.gz",
    output:
        fastq_zip_R1=output_dir / "{sample}_R1_fastqc.zip",
        fastq_html_R1=output_dir / "{sample}_R1_fastqc.html",
        fastq_zip_R2=output_dir / "{sample}_R2_fastqc.zip",
        fastq_html_R2=output_dir / "{sample}_R2_fastqc.html",
    params:
        outdir=output_dir,
    priority: 1
    conda:
        "../envs/env_qc.yaml"
    message:
        "Running FastQC for sample {wildcards.sample}"
    log:
        log_dir / "{sample}_fastqc.log",
    benchmark:
        benchmarks_dir / "{sample}_fastqc.benchmark.txt"
    threads: config["threads"]
    resources:
        mem_gb=4,
    shell:
        """
        mkdir -p {params.outdir}

        fastqc {input.fastq_R1} {input.fastq_R2} \
        -t {threads} \
        --outdir {params.outdir} \
        &> {log}
        """
