# get stdlib modules
from pathlib import Path

# get local modules
from snakemake.logging import logger
from utils.utils_stage import StageUtils
from utils.utils_pipeline import PipelineUtils

# define data flow directories
# work_dir: Path = Path(config["work_dir"])
# output_dir: Path = Path(f'{work_dir}/{config["output_dir"]}')
output_dir: Path = Path("/home/sameesh/SRR")
sra_filepath: Path = Path(f'{config["sra_filepath"]}')

# define log & benchmark directories
log_dir: Path = Path(f'{output_dir}/{config["log_dir"]}')
benchmarks_dir: Path = Path(f'{output_dir}/{config["benchmarks_dir"]}')

# get available resources
memory: float = PipelineUtils.get_available_memory()
cores: int = PipelineUtils.get_max_cores()

# generate flattened samples list
srr_acc_list: list = StageUtils.get_sra_ids(sra_filepath)

# generate a list of all files to be generated by rule `all` (terminal files)
terminal_files: list = StageUtils.generate_terminal_files(
    out_dir=output_dir,
    sra_acc_list=srr_acc_list,
    sample_type=config["sample_type"],
    ext=config["fastq_ext"],
)


rule all:
    """
    Generate all terminal files for the snakemake rule(s) below
    """
    input:
        terminal_files,
    output:
        temp(touch(f"{output_dir}/progress/stage.done")),


rule run_sratools:
    """
    Runs sratoolkit `prefetch` and downloads the .sra file
    for samples
    """
    input:
        sra_acc_file=sra_filepath,
    output:
        temp(
            expand(
                "{out_dir}/{sample}/{sample}.sra",
                sample=[sample for sample in srr_acc_list],
                out_dir=output_dir,
            )
        ),
        expand(
            "{out_dir}/{sample}/{sample}_{read}.fastq.gz",
                sample=[sample for sample in srr_acc_list],
                out_dir=output_dir,
                read=["1", "2"],
            )
            if config["sample_type"] == "paired_end"
        else [],
        expand(
            "{out_dir}/{sample}/{sample}.fastq.gz",
                sample=[sample for sample in srr_acc_list],
                out_dir=output_dir,
            )
            if config["sample_type"] == "single_end"
        else [],
        sra_outdir=directory(f"{output_dir}"),
    params:
        sample_type=config["sample_type"],
        skip_technical="--skip-technical" if config["skip_technical"] else "",
        include_technical="--include-technical" if config["include_technical"] else "",
        memory=memory,
    priority: 1
    conda:
        "sra"
    message:
        "Running sratoolkit `prefetch` & `fasterq-dump`"
    log:
        log_dir / "sra.log",
    benchmark:
        benchmarks_dir / "sra.benchmark.txt"
    threads: cores * 2
    shell:
        """
        ./workflow/scripts/sratools \
        -i {input.sra_acc_file} \
        -o {output.sra_outdir} \
        -l {params.sample_type} \
        -t {threads} \
        -m {params.memory} \
        {params.skip_technical} \
        {params.include_technical} \
        2> {log}
        """
