# get stdlib modules
from pathlib import Path

# get local modules
from utils.utils_trimming import TrimmingUtils

# define data flow directories
work_dir: Path = Path(config["work_dir"])
input_dir: Path = Path(config["pipeline_input"])
output_dir: Path = Path(f'{input_dir}/{config["results"]}/{config["output_dir"]}')


# define log & benchmark directories
log_dir: Path = Path(f'{output_dir}/{config["log_dir"]}')
benchmarks_dir: Path = Path(f'{output_dir}/{config["benchmarks_dir"]}')

# generate flattened samples list
flattended_samples: list = []
flattended_samples.extend(config["sample_groups"]["control"])
flattended_samples.extend(config["sample_groups"]["condition"])

# generate a list of all files to be generated by rule `all` (terminal files)
terminal_files: list = TrimmingUtils.generate_terminal_files(
    out_dir=output_dir,
    flattened_sample_list=flattended_samples,
    sample_type=config["sample_type"],
)


rule all:
    """
    Generate all terminal files for the snakemake rule(s) below
    """
    input:
        terminal_files,
    output:
        temp(touch(f"{work_dir}/progress/trimming.done")),


rule run_trimgalore:
    """
    Runs TrimGalore - Wrapper around cutadapt and FastQC to
    apply quality and adapter trimming to FastQ files
    """
    input:
        fastq_R1=input_dir / "{sample}_R1.fastq.gz",
        fastq_R2=input_dir / "{sample}_R2.fastq.gz",
    output:
        fastq_R1_trimmed=output_dir / "{sample}_R1_val_1.fq.gz",
        fastq_R2_trimmed=output_dir / "{sample}_R2_val_2.fq.gz",
        fastq_R1_trimmed_report=output_dir / "{sample}_R1.fastq.gz_trimming_report.txt",
        fastq_R2_trimmed_report=output_dir / "{sample}_R2.fastq.gz_trimming_report.txt",
    params:
        outdir=output_dir,
    priority: 1
    conda:
        "../envs/env_trimming.yaml"
    message:
        "Running TrimGalore for sample {wildcards.sample}"
    log:
        log_dir / "{sample}.trimgalore.log",
    benchmark:
        benchmarks_dir / "{sample}.trimgalore.benchmark.txt"
    threads: config["threads"]
    resources:
        mem_gb=8,
    shell:
        """
        trim_galore \
        --fastqc \
        --paired \
        {input.fastq_R1} {input.fastq_R2} \
        --output_dir {params.outdir} \
        &> {log}
        """
